YTHDF1_TREW = YTHDF1_TREW_gr,
YTHDF2_TREW = YTHDF2_TREW_gr,
miR_targeted_genes = miR_targeted_genes_grl,
TargetScan = TargetScan_hg19_gr,
Verified_miRtargets = verified_targets_gr,
METTL3_TREW = METTL3_TREW,
METTL14_TREW = METTL14_TREW,
WTAP_TREW = WTAP_TREW,
METTL16_CLIP = METTL16_CLIP,
ALKBH5_PARCLIP = ALKBH5_PARCLIP,
FTO_CLIP = FTO_CLIP,
FTO_eCLIP = FTO_eCLIP
)
Training_data <- SummarizedExperiment(rowRanges = exon_DRACH)
Training_data_annotated <- predictors_annot(se = exon_DRACH,
txdb = txdb,
bsgnm = Hsapiens,
fc = fitCons.UCSC.hg19,
pc = phastCons100way.UCSC.hg19,
struct_hybridize = Struc_hg19,
feature_lst = Additional_features_hg19,
hk_genes_list = HK_hg19_eids,
motif = c("AAACA","AGACA","AAACT",
"AGACT","AAACC","AGACC",
"GAACA","GGACA","GAACT",
"GGACT","GAACC","GGACC",
"TAACA","TGACA","TAACT",
"TGACT","TAACC","TGACC"),
annot_clustering = exon_DRACH,
standardization = F,
genes_ambiguity_method = "average") #The motif annotated are instances of RRACH
library(m6ALogisticModel)
library(TxDb.Hsapiens.UCSC.hg19.knownGene)
library(BSgenome.Hsapiens.UCSC.hg19)
library(phastCons100way.UCSC.hg19)
library(fitCons.UCSC.hg19)
exons_target <- exonsBy(txdb, by = "gene")
exon_DRACH <- sample_sequence("DRACH",reduce( unlist(exons_target) ),Hsapiens)
library(m6ALogisticModel)
library(TxDb.Hsapiens.UCSC.hg19.knownGene)
library(BSgenome.Hsapiens.UCSC.hg19)
library(phastCons100way.UCSC.hg19)
library(fitCons.UCSC.hg19)
txdb = TxDb.Hsapiens.UCSC.hg19.knownGene
exons_target <- exonsBy(txdb, by = "gene")
exon_DRACH <- sample_sequence("DRACH",reduce( unlist(exons_target) ),Hsapiens)
Additional_features_hg19 = list(
HNRNPC_eCLIP = eCLIP_HNRNPC_gr,
YTHDC1_TREW = YTHDC1_TREW_gr,
YTHDF1_TREW = YTHDF1_TREW_gr,
YTHDF2_TREW = YTHDF2_TREW_gr,
miR_targeted_genes = miR_targeted_genes_grl,
TargetScan = TargetScan_hg19_gr,
Verified_miRtargets = verified_targets_gr,
METTL3_TREW = METTL3_TREW,
METTL14_TREW = METTL14_TREW,
WTAP_TREW = WTAP_TREW,
METTL16_CLIP = METTL16_CLIP,
ALKBH5_PARCLIP = ALKBH5_PARCLIP,
FTO_CLIP = FTO_CLIP,
FTO_eCLIP = FTO_eCLIP
)
Training_data <- SummarizedExperiment(rowRanges = exon_DRACH)
Training_data_annotated <- predictors_annot(se = exon_DRACH,
txdb = txdb,
bsgnm = Hsapiens,
fc = fitCons.UCSC.hg19,
pc = phastCons100way.UCSC.hg19,
struct_hybridize = Struc_hg19,
feature_lst = Additional_features_hg19,
hk_genes_list = HK_hg19_eids,
motif = c("AAACA","AGACA","AAACT",
"AGACT","AAACC","AGACC",
"GAACA","GGACA","GAACT",
"GGACT","GAACC","GGACC",
"TAACA","TGACA","TAACT",
"TGACT","TAACC","TGACC"),
annot_clustering = exon_DRACH,
standardization = F,
genes_ambiguity_method = "average") #The motif annotated are instances of RRACH
Training_data_annotated <- predictors_annot(se =Training_data,
txdb = txdb,
bsgnm = Hsapiens,
fc = fitCons.UCSC.hg19,
pc = phastCons100way.UCSC.hg19,
struct_hybridize = Struc_hg19,
feature_lst = Additional_features_hg19,
hk_genes_list = HK_hg19_eids,
motif = c("AAACA","AGACA","AAACT",
"AGACT","AAACC","AGACC",
"GAACA","GGACA","GAACT",
"GGACT","GAACC","GGACC",
"TAACA","TGACA","TAACT",
"TGACT","TAACC","TGACC"),
annot_clustering = exon_DRACH,
standardization = F,
genes_ambiguity_method = "average") #The motif annotated are instances of RRACH
Training_data_annotated <- predictors_annot(se =Training_data[1:100,],
txdb = txdb,
bsgnm = Hsapiens,
fc = fitCons.UCSC.hg19,
pc = phastCons100way.UCSC.hg19,
struct_hybridize = Struc_hg19,
feature_lst = Additional_features_hg19,
hk_genes_list = HK_hg19_eids,
motif = c("AAACA","AGACA","AAACT",
"AGACT","AAACC","AGACC",
"GAACA","GGACA","GAACT",
"GGACT","GAACC","GGACC",
"TAACA","TGACA","TAACT",
"TGACT","TAACC","TGACC"),
motif_clustering = NULL,
annot_clustering = exon_DRACH,
standardization = F,
genes_ambiguity_method = "average") #The motif annotated are instances of RRACH
SummarizedExperiment(rowRanges = hg19_miCLIP_gr)
library(m6ALogisticModel)
Training_data_annotated <- predictors_annot(se =Training_data[1:100,],
txdb = txdb,
bsgnm = Hsapiens,
fc = fitCons.UCSC.hg19,
pc = phastCons100way.UCSC.hg19,
struct_hybridize = Struc_hg19,
feature_lst = Additional_features_hg19,
hk_genes_list = HK_hg19_eids,
motif = c("AAACA","AGACA","AAACT",
"AGACT","AAACC","AGACC",
"GAACA","GGACA","GAACT",
"GGACT","GAACC","GGACC",
"TAACA","TGACA","TAACT",
"TGACT","TAACC","TGACC"),
motif_clustering = NULL,
annot_clustering = exon_DRACH,
standardization = F,
genes_ambiguity_method = "average")
txdb = TxDb.Hsapiens.UCSC.hg19.knownGene
Training_data_annotated <- predictors_annot(se =Training_data[1:100,],
txdb = txdb,
bsgnm = Hsapiens,
fc = fitCons.UCSC.hg19,
pc = phastCons100way.UCSC.hg19,
struct_hybridize = Struc_hg19,
feature_lst = Additional_features_hg19,
hk_genes_list = HK_hg19_eids,
motif = c("AAACA","AGACA","AAACT",
"AGACT","AAACC","AGACC",
"GAACA","GGACA","GAACT",
"GGACT","GAACC","GGACC",
"TAACA","TGACA","TAACT",
"TGACT","TAACC","TGACC"),
motif_clustering = NULL,
annot_clustering = exon_DRACH,
standardization = F,
genes_ambiguity_method = "average")
library(m6ALogisticModel)
Training_data_annotated <- predictors_annot(se =Training_data[1:100,],
txdb = txdb,
bsgnm = Hsapiens,
fc = fitCons.UCSC.hg19,
pc = phastCons100way.UCSC.hg19,
struct_hybridize = Struc_hg19,
feature_lst = Additional_features_hg19,
hk_genes_list = HK_hg19_eids,
motif = c("AAACA","AGACA","AAACT",
"AGACT","AAACC","AGACC",
"GAACA","GGACA","GAACT",
"GGACT","GAACC","GGACC",
"TAACA","TGACA","TAACT",
"TGACT","TAACC","TGACC"),
motif_clustering = NULL,
annot_clustering = exon_DRACH,
standardization = F,
genes_ambiguity_method = "average")
txdb = TxDb.Hsapiens.UCSC.hg19.knownGene
Training_data_annotated <- predictors_annot(se =Training_data[1:100,],
txdb = txdb,
bsgnm = Hsapiens,
fc = fitCons.UCSC.hg19,
pc = phastCons100way.UCSC.hg19,
struct_hybridize = Struc_hg19,
feature_lst = Additional_features_hg19,
hk_genes_list = HK_hg19_eids,
motif = c("AAACA","AGACA","AAACT",
"AGACT","AAACC","AGACC",
"GAACA","GGACA","GAACT",
"GGACT","GAACC","GGACC",
"TAACA","TGACA","TAACT",
"TGACT","TAACC","TGACC"),
motif_clustering = NULL,
annot_clustering = exon_DRACH,
standardization = F,
genes_ambiguity_method = "average")
GenomicScores::score()
package.version("GenomicScores")
library(m6ALogisticModel)
library(TxDb.Hsapiens.UCSC.hg19.knownGene)
library(BSgenome.Hsapiens.UCSC.hg19)
library(phastCons100way.UCSC.hg19)
library(fitCons.UCSC.hg19)
txdb = TxDb.Hsapiens.UCSC.hg19.knownGene
exons_target <- exonsBy(txdb, by = "gene")
exon_DRACH <- sample_sequence("DRACH", reduce( unlist(exons_target) ), Hsapiens) - 2
Additional_features_hg19 = list(
HNRNPC_eCLIP = eCLIP_HNRNPC_gr,
YTHDC1_TREW = YTHDC1_TREW_gr,
YTHDF1_TREW = YTHDF1_TREW_gr,
YTHDF2_TREW = YTHDF2_TREW_gr,
miR_targeted_genes = miR_targeted_genes_grl,
TargetScan = TargetScan_hg19_gr,
Verified_miRtargets = verified_targets_gr,
METTL3_TREW = METTL3_TREW,
METTL14_TREW = METTL14_TREW,
WTAP_TREW = WTAP_TREW,
METTL16_CLIP = METTL16_CLIP,
ALKBH5_PARCLIP = ALKBH5_PARCLIP,
FTO_CLIP = FTO_CLIP,
FTO_eCLIP = FTO_eCLIP
)
Training_data <- SummarizedExperiment(rowRanges = exon_DRACH)
Training_data_annotated <- predictors_annot(se =Training_data[1:100,],
txdb = txdb,
bsgnm = Hsapiens,
fc = fitCons.UCSC.hg19,
pc = phastCons100way.UCSC.hg19,
struct_hybridize = Struc_hg19,
feature_lst = Additional_features_hg19,
hk_genes_list = HK_hg19_eids,
motif = c("AAACA","AGACA","AAACT",
"AGACT","AAACC","AGACC",
"GAACA","GGACA","GAACT",
"GGACT","GAACC","GGACC",
"TAACA","TGACA","TAACT",
"TGACT","TAACC","TGACC"),
motif_clustering = NULL,
annot_clustering = exon_DRACH,
standardization = F,
genes_ambiguity_method = "average")
length(exon_DRACH)
Additional_features_hg19 = list(
HNRNPC_eCLIP = eCLIP_HNRNPC_gr,
YTHDC1_TREW = YTHDC1_TREW_gr,
YTHDF1_TREW = YTHDF1_TREW_gr,
YTHDF2_TREW = YTHDF2_TREW_gr,
miR_targeted_genes = miR_targeted_genes_grl,
TargetScan = TargetScan_hg19_gr,
Verified_miRtargets = verified_targets_gr,
METTL3_TREW = METTL3_TREW,
METTL14_TREW = METTL14_TREW,
WTAP_TREW = WTAP_TREW,
METTL16_CLIP = METTL16_CLIP,
ALKBH5_PARCLIP = ALKBH5_PARCLIP,
FTO_CLIP = FTO_CLIP,
FTO_eCLIP = FTO_eCLIP
)
unlabeled_data <- SummarizedExperiment(rowRanges = exon_DRACH)
unlabeled_data <- predictors_annot(se = unlabeled_data,
txdb = txdb,
bsgnm = Hsapiens,
fc = fitCons.UCSC.hg19,
pc = phastCons100way.UCSC.hg19,
struct_hybridize = Struc_hg19,
feature_lst = Additional_features_hg19,
hk_genes_list = HK_hg19_eids,
motif = c("AAACA","AGACA","AAACT",
"AGACT","AAACC","AGACC",
"GAACA","GGACA","GAACT",
"GGACT","GAACC","GGACC",
"TAACA","TGACA","TAACT",
"TGACT","TAACC","TGACC"),
motif_clustering = NULL,
annot_clustering = exon_DRACH,
standardization = F,
genes_ambiguity_method = "average")
query_gr = exon_DRACH[1:100]
bsgnm = Hsapiens
query_gr
stopifnot(all(width(query_gr) == width(query_gr)[1]))
bsgnm_view <- Views(bsgnm,query_gr)
sequences <- as.character( DNAStringSet(bsgnm_view) )
sequences_lst
sequences
query_gr = query_gr + 20
stopifnot(all(width(query_gr) == width(query_gr)[1]))
bsgnm_view <- Views(bsgnm,query_gr)
sequences <- as.character( DNAStringSet(bsgnm_view) )
sequences_lst <- strsplit(sequences,"")
sequences_lst
sequences_lst <- matrix( unlist( strsplit(sequences,"") ) , ncol = width(query_gr)[1])
head(sequences_lst)
sequences_lst <- matrix( unlist( strsplit(sequences,"") ) , ncol = width(query_gr)[1], byrow = T)
head(sequences_lst)
sequences_M
sequences_M <- matrix( unlist( strsplit(sequences,"") ) , ncol = width(query_gr)[1], byrow = T)
sequences_M
purine_M <- sequences_M == "A" | sequences_M == "G"
amino_M <- sequences_M == "A" | sequences_M == "C"
weakHyb_M <- sequences_M == "A" | sequences_M == "T"
purine_M
N = width(query_gr)[1]
N
seq_len(N)
colnames(weakHyb_M) <-  paste0("weakHyb_",seq_len(N))
purine_M <- sequences_M == "A" | sequences_M == "G"
colnames(purine_M) <-  paste0("purine_",seq_len(N))
amino_M <- sequences_M == "A" | sequences_M == "C"
colnames(amino_M) <-  paste0("amino_",seq_len(N))
weakHyb_M <- sequences_M == "A" | sequences_M == "T"
colnames(weakHyb_M) <-  paste0("weakHyb_",seq_len(N))
sequences_M
sequences_M
cumsum(cumFreq_M == "A")
cumsum(sequences_M == "A")
cumsum(sequences_M[1] == "A")
cumsum(sequences_M[1,] == "A")
cumsum(sequences_M[1:2,] == "A")
cumFreq_A <- rowCumsums(squences_M == "A")
cumFreq_A <- rowCumsums(sequences_M == "A")
cumFreq_A <- rowCumsums(as.numeric( sequences_M == "A" ))
as.numeric( sequences_M == "A" )
cumFreq_A <- rowCumsums(matrix(as.numeric( sequences_M == "A" ), ncol = N, byrow = T))
head(cumFreq_A)
cumFreq_A <- rowCumsums(matrix(as.numeric( sequences_M == "A" ), ncol = N, byrow = T))
cumFreq_T <- rowCumsums(matrix(as.numeric( sequences_M == "T" ), ncol = N, byrow = T))
cumFreq_C <- rowCumsums(matrix(as.numeric( sequences_M == "C" ), ncol = N, byrow = T))
cumFreq_G <- rowCumsums(matrix(as.numeric( sequences_M == "G" ), ncol = N, byrow = T))
cumFreq_combined <- matrix(0,ncol = N, nrow = length(query_gr))
cumFreq_combined
cumFreq_combined[sequences_M == "A"] <- cumFreq_A[sequences_M == "A"]
cumFreq_combined[sequences_M == "A"] <- cumFreq_A[sequences_M == "A"]
cumFreq_combined[sequences_M == "T"] <- cumFreq_A[sequences_M == "T"]
cumFreq_combined[sequences_M == "C"] <- cumFreq_A[sequences_M == "C"]
cumFreq_combined[sequences_M == "G"] <- cumFreq_A[sequences_M == "G"]
cumFreq_combined
cumFreq_combined <- matrix(0,ncol = N, nrow = length(query_gr))
cumFreq_combined[sequences_M == "A"] <- cumFreq_A[sequences_M == "A"]
cumFreq_combined[sequences_M == "T"] <- cumFreq_T[sequences_M == "T"]
cumFreq_combined[sequences_M == "C"] <- cumFreq_C[sequences_M == "C"]
cumFreq_combined[sequences_M == "G"] <- cumFreq_G[sequences_M == "G"]
cumFreq_combined
head(cumFreq_T)
head(sequences_M == "T")
head(cumFreq_T)
head(matrix(as.numeric( sequences_M == "T" ), ncol = N, byrow = T))
matrix(as.numeric( sequences_M == "T" ), ncol = N, bycol = T)
matrix(as.numeric( sequences_M == "T" ), ncol = N, byrow = F)
cumFreq_A <- rowCumsums(matrix(as.numeric( sequences_M == "A" ), ncol = N, byrow = F))
cumFreq_T <- rowCumsums(matrix(as.numeric( sequences_M == "T" ), ncol = N, byrow = F))
cumFreq_C <- rowCumsums(matrix(as.numeric( sequences_M == "C" ), ncol = N, byrow = F))
cumFreq_G <- rowCumsums(matrix(as.numeric( sequences_M == "G" ), ncol = N, byrow = F))
cumFreq_combined <- matrix(0,ncol = N, nrow = length(query_gr))
cumFreq_combined[sequences_M == "A"] <- cumFreq_A[sequences_M == "A"]
cumFreq_combined[sequences_M == "T"] <- cumFreq_T[sequences_M == "T"]
cumFreq_combined[sequences_M == "C"] <- cumFreq_C[sequences_M == "C"]
cumFreq_combined[sequences_M == "G"] <- cumFreq_G[sequences_M == "G"]
head(cumFreq_combined)
cumFreq_combined
cumFreq_combined / seq_len(N)
t(cumFreq_combined) / seq_len(N)
cumFreq_combined <- t(t(cumFreq_combined) / seq_len(N))
head(cumFreq_combined)
colnames(cumFreq_combined ) <-  paste0("cumFreq_",seq_len(N))
#'
#' @description \code{sequence_features} is used to extract the sequence features given GenomicRanges object.
#'
#' @param query_gr a GRanges object to generate the underlying sequence features, all the widths of the ranges must be equal.
#' @param bsgnm a BSgenome object which encode the genome information.
#' @return a data.frame contains the sequence features in its collumns.
#' @import BSgenome
#' @export
#'
#'
sequence_features2 <- function(query_gr, bsgnm) {
stopifnot(all(width(query_gr) == width(query_gr)[1]))
N = width(query_gr)[1]
bsgnm_view <- Views(bsgnm,query_gr)
sequences <- as.character( DNAStringSet(bsgnm_view) )
rm(bsgnm_view)
sequences_M <- matrix( unlist( strsplit(sequences,"") ) , ncol =  N, byrow = T)
rm(sequences)
#vectorized solution
purine_M <- sequences_M == "A" | sequences_M == "G"
colnames(purine_M) <-  paste0("purine_",seq_len(N))
amino_M <- sequences_M == "A" | sequences_M == "C"
colnames(amino_M) <-  paste0("amino_",seq_len(N))
weakHyb_M <- sequences_M == "A" | sequences_M == "T"
colnames(weakHyb_M) <- paste0("weakHyb_",seq_len(N))
cumFreq_A <- rowCumsums(matrix(as.numeric( sequences_M == "A" ), ncol = N, byrow = F))
cumFreq_T <- rowCumsums(matrix(as.numeric( sequences_M == "T" ), ncol = N, byrow = F))
cumFreq_C <- rowCumsums(matrix(as.numeric( sequences_M == "C" ), ncol = N, byrow = F))
cumFreq_G <- rowCumsums(matrix(as.numeric( sequences_M == "G" ), ncol = N, byrow = F))
cumFreq_combined <- matrix(0,ncol = N, nrow = length(query_gr))
cumFreq_combined[sequences_M == "A"] <- cumFreq_A[sequences_M == "A"]
cumFreq_combined[sequences_M == "T"] <- cumFreq_T[sequences_M == "T"]
cumFreq_combined[sequences_M == "C"] <- cumFreq_C[sequences_M == "C"]
cumFreq_combined[sequences_M == "G"] <- cumFreq_G[sequences_M == "G"]
cumFreq_combined <- t(t(cumFreq_combined) / seq_len(N))
colnames(cumFreq_combined ) <-  paste0("cumFreq_",seq_len(N))
return(as.data.frame(cbind(purine_M,amino_M,weakHyb_M,cumFreq_combined)))
}
seq_features <- sequence_features2(rowRanges( unlabeled_data ) + 20, Hsapiens) #sequence feature is defined on the 10bp flanking regions
head(seq_features)
Model_matrix <- cbind( mcols(unlabeled_data), mcols(unlabeled_data_annotated), seq_features )
Model_matrix[,1] <- factor(Model_matrix[,1])
Model_matrix <- cbind( mcols(unlabeled_data), mcols(unlabeled_data_annotated), seq_features )
Model_matrix <- cbind( mcols(unlabeled_data_annotated), seq_features )
Model_matrix <- cbind( mcols(unlabeled_data), seq_features )
write.csv(as.data.frame( Model_matrix ), "unlabeled_data_exon.csv")
getwd()
colnames(Model_matrix)
head(Model_matrix$dist_nearest_p200)
head(Model_matrix$dist_nearest_p2000)
table(Model_matrix$dist_nearest_p2000)
dim(Model_matrix)
dim(Model_matrix)
?distanceToNearest
annot_clustering = exon_DRACH
exon_DRACH
row_gr = sample(annot_clustering,100)
any(row_gr %over% annot_clustering)
any(row_gr %over% annot_clustering)
match_obj <- distanceToNearest(annot_clustering)
match_obj
fol <- findOverlaps(row_gr, annot_clustering)
fol
nrow(fol)
dim(fol)
queryLength(fol)
dist_tmp <- rep(2000, queryLength(fol))
dist_tmp
queryHits(fol)
head(subjectHits(fol))
match_obj
dist_tmp <- mcols(subjectHits)$distance[match(subjectHits(fol),queryHits(match_obj))]
dist_tmp <- mcols(subjectHits(match_obj))$distance[match(subjectHits(fol),queryHits(match_obj))]
dist_tmp <- mcols(match_obj)$distance[match(subjectHits(fol),queryHits(match_obj))]
dist_tmp
head(dist_tmp)
dist_tmp
queryHits(fol)
dist_self[queryHits(fol)] <- dist_tmp
dist_self <- rep(2000, length(row_gr))
row_gr
dist_self <- rep(2000, length(row_gr))
match_obj <- distanceToNearest(row_gr, annot_clustering)
dist_self[queryHits(match_obj)] <- mcols(match_obj)$distance
rm(match_obj)
#For row_gr that is overlapping with annot_clustering
if(any(row_gr %over% annot_clustering)){
match_obj <- distanceToNearest(annot_clustering)
fol <- findOverlaps(row_gr, annot_clustering)
dist_tmp <- rep(2000, queryLength(fol))
dist_tmp <- mcols(match_obj)$distance[match(subjectHits(fol),queryHits(match_obj))]
dist_self[queryHits(fol)] <- dist_tmp
rm(fol, match_obj, dist_tmp)
}
dist_self
distanceToNearest(row_gr,subsetByOverlaps( annot_clustering , row_gr, invert = T))
library(m6ALogisticModel)
library(TxDb.Hsapiens.UCSC.hg19.knownGene)
library(BSgenome.Hsapiens.UCSC.hg19)
library(phastCons100way.UCSC.hg19)
library(fitCons.UCSC.hg19)
txdb = TxDb.Hsapiens.UCSC.hg19.knownGene
exons_target <- exonsBy(txdb, by = "gene")
exon_DRACH <- sample_sequence("DRACH", reduce( unlist(exons_target) ), Hsapiens) - 2
Additional_features_hg19 = list(
HNRNPC_eCLIP = eCLIP_HNRNPC_gr,
YTHDC1_TREW = YTHDC1_TREW_gr,
YTHDF1_TREW = YTHDF1_TREW_gr,
YTHDF2_TREW = YTHDF2_TREW_gr,
miR_targeted_genes = miR_targeted_genes_grl,
TargetScan = TargetScan_hg19_gr,
Verified_miRtargets = verified_targets_gr,
METTL3_TREW = METTL3_TREW,
METTL14_TREW = METTL14_TREW,
WTAP_TREW = WTAP_TREW,
METTL16_CLIP = METTL16_CLIP,
ALKBH5_PARCLIP = ALKBH5_PARCLIP,
FTO_CLIP = FTO_CLIP,
FTO_eCLIP = FTO_eCLIP
)
unlabeled_data <- SummarizedExperiment(rowRanges = exon_DRACH)
unlabeled_data <- predictors_annot(se = unlabeled_data,
txdb = txdb,
bsgnm = Hsapiens,
fc = fitCons.UCSC.hg19,
pc = phastCons100way.UCSC.hg19,
struct_hybridize = Struc_hg19,
feature_lst = Additional_features_hg19,
hk_genes_list = HK_hg19_eids,
motif = c("AAACA","AGACA","AAACT",
"AGACT","AAACC","AGACC",
"GAACA","GGACA","GAACT",
"GGACT","GAACC","GGACC",
"TAACA","TGACA","TAACT",
"TGACT","TAACC","TGACC"),
motif_clustering = NULL,
annot_clustering = exon_DRACH,
standardization = F,
genes_ambiguity_method = "average")
seq_features <- sequence_features2(rowRanges( unlabeled_data ) + 20, Hsapiens) #sequence feature is defined on the 10bp flanking regions
Model_matrix <- cbind( mcols(unlabeled_data), seq_features )
head(Model_matrix$dist_nearest_p2000)
head(Model_matrix$dist_nearest_p2000)
top(Model_matrix$dist_nearest_p2000)
hist(Model_matrix$dist_nearest_p2000)
hist(Model_matrix$dist_nearest_p200)
hist(Model_matrix$dist_nearest_p2000)
hist(Model_matrix$dist_nearest_p200)
hist(Model_matrix$dist_nearest_p200)
readr::write_csv(as.data.frame( Model_matrix ), "unlabeled_data_exon.csv")
rm(list = ls())
